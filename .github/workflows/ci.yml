name: Rust
on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          default: true
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  doc:
    runs-on: ubuntu-latest
    needs: cargo-readme
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rust-docs
          default: true
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Documentation
        uses: actions-rs/cargo@v1
        env:
          DOCS_RS: 1
        with:
          command: doc
      - name: Setup Cargo readme
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/cargo-readme
          key: ${{ runner.os }}-cargo-readme
      - name: Generate READMEs
        run: |
          cargo readme --no-title --no-indent-headings --no-license --no-badges > README.md
          (cd sys && cargo readme --no-title --no-indent-headings --no-license --no-badges > README.md)
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          base: ${{ github.head_ref }}
          commit-message: Updated READMEs
          branch: update-readmes
          delete-branch: true
          title: Update READMEs
          body: |
            READMEs should be updated to be consistent with latest changes

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: clippy
          default: true
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all --all-features --all-targets

  minver:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --all-features --all-targets -Z minimal-versions
        # TODO: Remove after publishing fftw-src which depends from zip ^5.13
        continue-on-error: true

  test:
    needs:
      - format
      - doc
      - check
    strategy:
      fail-fast: ${{ startsWith(github.ref, 'refs/tags/') }}
      matrix:
        include:
          # Generate bindings
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: arm-unknown-linux-gnueabihf
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: mips-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: mips64-unknown-linux-gnuabi64
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: mipsel-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: mips64el-unknown-linux-gnuabi64
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: powerpc-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: powerpc64-unknown-linux-gnu
            features: default
          - task: bindings
            os: ubuntu-latest
            rust: stable
            target: sparc64-unknown-linux-gnu
            features: default
          - task: bindings
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            features: default
          #- task: bindings
          #  os: macos-latest
          #  rust: stable
          #  target: aarch64-apple-darwin
          #  features: default
          - task: bindings
            os: windows-latest
            rust: stable
            target: i686-pc-windows-gnu
            features: default
          - task: bindings
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-gnu
            features: default
          - task: bindings
            os: windows-latest
            rust: stable
            target: i686-pc-windows-msvc
            features: default
          - task: bindings
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            features: default
          #- task: bindings
          #  os: ubuntu-latest
          #  rust: stable
          #  target: wasm32-unknown-emscripten
          #  features: default
          #- task: bindings
          #  os: ubuntu-latest
          #  rust: stable
          #  target: wasm32-wasi
          #  features: default
          # Test features
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: pkg-config
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: pkg-config,builtin
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: builtin,shared
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: builtin,static
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: builtin,double
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: builtin,fftw3
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: builtin,blas
          - task: features
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: check-size
          # Test channels
          - task: channels
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: default
          - task: channels
            os: ubuntu-latest
            rust: beta
            target: x86_64-unknown-linux-gnu
            features: default
          - task: channels
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
            features: default
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup linux packages
        if: contains(matrix.target, '-linux-') && startsWith(matrix.target, 'x86_64-') && matrix.task == 'features'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libaubio-dev libblas-dev
      - name: Setup cross linux toolchain
        if: contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'x86_64-')
        run: |
          GCC_TARGET=$(printf "${{ matrix.target }}" | sed 's/-unknown-/-/' | sed 's/arm[^-]*/arm/g')
          ENV_TARGET=$(printf "${{ matrix.target }}" | tr '-' '_')
          ENV_TARGET_UC=$(printf "${ENV_TARGET}" | tr '[[:lower:]]' '[[:upper:]]')
          sudo apt-get update -y
          sudo apt-get install -y --install-recommends gcc-${GCC_TARGET}
          echo "CC_${ENV_TARGET}=${GCC_TARGET}-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_${ENV_TARGET_UC}_LINKER=${GCC_TARGET}-gcc" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/usr/${GCC_TARGET}" >> $GITHUB_ENV
          case "${{ matrix.target }}" in
            x86_64-* | i686-*) ;;
            *)
            echo "CARGO_TEST_ARGS=--no-run" >> $GITHUB_ENV
            #sudo apt-get install -y qemu-user-static
            #QEMU_ARCH=$(printf "${{ matrix.target }}" | sed 's/\([^-]*\)-.*/\1/' | sed 's/powerpc/ppc/')
            #echo "CARGO_TARGET_${ENV_TARGET_UC}_RUNNER=qemu-${QEMU_ARCH}-static" >> $GITHUB_ENV
            ;;
          esac
      - name: Install packages
        if: matrix.task == 'features'
        run: |
          sudo apt-get install -y libvorbis-dev libogg-dev
      - name: Setup clang on windows
        if: startsWith(matrix.os, 'windows')
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: 11.0
          directory: ${{ runner.temp }}/llvm
      - name: Prepare env for windows (msvc)
        if: startsWith(matrix.os, 'windows') && endsWith(matrix.target, '-msvc')
        run: |
          echo "LIBCLANG_PATH=${{ runner.temp }}\llvm\bin\libclang.dll" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Prepare env for windows (gnu)
        if: startsWith(matrix.os, 'windows') && endsWith(matrix.target, '-gnu')
        run: |
          # Add symlinks to the GNU C headers for Clang
          New-Item -Path "${{ runner.temp }}\llvm\x86_64-w64-mingw32" -ItemType SymbolicLink -Value "C:\msys64\mingw64\x86_64-w64-mingw32"
          New-Item -Path "${{ runner.temp }}\llvm\i686-w64-mingw32" -ItemType SymbolicLink -Value "C:\msys64\mingw32\i686-w64-mingw32"
          # Add mingw executable paths to PATH
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC_i686_pc_windows_gnu=i686-w64-mingw32-gcc" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Setup emscripten toolchain
        if: startsWith(matrix.target, 'wasm32-') && endsWith(matrix.target, '-emscripten')
        uses: mymindstorm/setup-emsdk@v7
      - name: Prepare env for emscripten
        if: startsWith(matrix.target, 'wasm32-') && endsWith(matrix.target, '-emscripten')
        run: |
          echo "CC_wasm32_unknown_emscripten=${EMSDK}/upstream/emscripten/bin/emcc" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=${EMSDK}/upstream/emscripten/cache/sysroot" >> $GITHUB_ENV
      - name: Setup wasi toolchain
        if: startsWith(matrix.target, 'wasm32-') && endsWith(matrix.target, '-wasi')
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk_12.0_amd64.deb
          sudo dpkg -i wasi-sdk_12.0_amd64.deb
          echo "CC_wasm32_wasi=/opt/wasi-sdk/bin/clang" >> $GITHUB_ENV
          echo "CFLAGS_wasm32_wasi=\"--target=wasm32-wasi --sysroot=/opt/wasi-sdk/share/wasi-sysroot\"" >> $GITHUB_ENV
          echo "CARGO_TARGET_WASM32_WASI_LINKER=/opt/wasi-sdk/bin/wasm-ld" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/opt/wasi-sdk/share/wasi-sysroot" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          components: rustfmt
          default: true
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Update deps
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Build sys
        uses: actions-rs/cargo@v1
        env:
          RUST_LOG: bindgen=warn,bindgen::ir=error,bindgen::codegen=error
        with:
          command: build
          args: --manifest-path sys/Cargo.toml --target ${{ matrix.target }} --features update-bindings
      - name: Upload bindings
        if: matrix.task == 'bindings'
        uses: actions/upload-artifact@v2
        with:
          name: bindings
          path: |
            sys/${{ env.AUBIO_SYS_BINDINGS_FILE_SINGLE }}
            sys/${{ env.AUBIO_SYS_BINDINGS_FILE_DOUBLE }}
            LICENSE
            README.md
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} --no-default-features --features ${{ matrix.features }}
      - name: Test
        uses: actions-rs/cargo@v1
        timeout-minutes: 12
        env:
          RUST_BACKTRACE: full
        with:
          command: test
          args: --all --target ${{ matrix.target }} --no-default-features --features ${{ matrix.features }} ${{ env.CARGO_TEST_ARGS }}

  update-bindings:
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') }}
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Download bindings
        uses: actions/download-artifact@v2
        with:
          name: bindings
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3
        with:
          base: ${{ github.head_ref }}
          commit-message: Updated bindings
          branch: update-bindings
          delete-branch: true
          title: Update bindings
          body: |
            Bindings should be updated to be consistent with latest changes

  publish:
    if: github.repository == 'katyo/aubio-rs' && startsWith(github.ref, 'refs/tags/')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Publish crates
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CRATES_TOKEN }}
          args: --no-verify
          #dry-run: true

  cargo-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cargo/bin/cargo-readme
          key: ${{ runner.os }}-cargo-readme
      - name: Install cargo readme
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-readme
